heat_template_version: 2015-10-15

description: Autoscale (Up with HEAT and Down with internals managed by etcd)

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance
  image:
    type: string
    label: Image Name
    description: Image to be used for compute instance
    default: Ubuntu Xenial #Note: Currently only works on Xenial. Has dependencies on apt and systemd so CentOS and Trusty won't work
  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used
    default: m1.tiny
  net_name:
    type: string
    label: Network Name
    description: Name of the network to use
  OS_USERNAME:
    type: string
    label: Your username
  OS_PASSWORD:
    type: string
    label: Your password
  OS_TENANT_NAME:
    type: string
    label: Your tenant name
  OS_REGION:
    type: string
    label: Your region
    default: "regionOne"
  OS_AUTH_URL:
    type: string
    label: The authorisation url for openstack
    default: "http://delta.internal.sanger.ac.uk/5000/v2.0/"
  sec_grps:
    type: comma_delimited_list
    label: a comma separated list of security groups
    description: The list of security groups your instances require
    default: ["cockroachdb","internal_etcd","cloudforms_ssh_in","netdata"]
  capacity:
    type: number 
    label: start group size
    default: 3 
  scaledownperiod:
    type: number
    label: time between scales (down)
    description: The minimum time between 1 idle instance being removed and the next idle instance being removed
    default: 200
  configscript: 
    type: string
    label: name of script
    description: Tha name the script should have on the instances
  metricsserver:
    type: string
    label: netdata server ip
    description: The ip of an openstack instance running netdata with an api key configured with the same value as its openstack id
    default: "None"

resources:
  group:
    type: OS::Heat::AutoScalingGroup
    properties:
      cooldown: 10
      desired_capacity: {get_param: capacity}
      max_size: 5
      min_size: 1
      resource:
        type: OS::Nova::Server
        properties:
          #name: etcd_cluster-node-%index%
          key_name: { get_param: key_name } #use a pre-registered key for access after creation
          image: { get_param: image }    #which image to use for the VM
          config_drive: true
          flavor: { get_param: instance_type }      #which flavor of instance to boot
          networks: [{"network": { get_param: net_name }}]   #which private network to put the instance on
          security_groups: {get_param: sec_grps}
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          personality:
            /home/ubuntu/locking.py: 
              str_replace:
                template:
                  get_file: etcd/etcd_locking.py
                params:
                  $thisisatimeout:
                    get_param: scaledownperiod
            /home/ubuntu/suicide.service: 
              get_file: etcd/etcd_suicide.service
            /home/ubuntu/etcd2.service: 
              get_file: etcd/etcd_etcd2.service
            /home/ubuntu/configscript.sh: 
              get_file: configscript.sh
          user_data_format: RAW
          user_data: 
            str_replace:
              template: { get_file: etcd/etcd_autoscale.sh }
              params:
                $thisisausername: {get_param: OS_USERNAME}
                $thisisapassword: {get_param: OS_PASSWORD}
                $thisisatenantname: {get_param: OS_TENANT_NAME}
                $thisisaregion: {get_param: OS_REGION}
                $thisisacapacity: {get_param: capacity}
                $thisisatimeout: {get_param: scaledownperiod}
                $thisisametricserver: {get_param: metricsserver}
                $thisisascriptname: {get_param: configscript}
                $thisisaurl: {get_param: OS_AUTH_URL}

  scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: group }
      cooldown: 10
      scaling_adjustment: 1

  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      meter_name: cpu_util
      statistic: avg
      period: 1200
      evaluation_periods: 1
      threshold: 50
      query: [{'field':'resource_metadata.user_metadata.stack', 'value': {get_param: "OS::stack_id"}}]
      alarm_actions:
        - {get_attr: [scaleup_policy, alarm_url]}
      comparison_operator: gt 

outputs:
  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [scaleup_policy, alarm_url]}
